CLASS class
ID HelloWorld
LEFT_CURLY_B {
PUBLIC public
STATIC static
VOID void
MAIN main
LEFT_ROUND_B (
STRING String
LEFT_SQUARE_B [
RIGHT_SQUARE_B ]
ID args
RIGHT_ROUND_B )
LEFT_CURLY_B {
SYSTEM.OUT.PRINTLN System.out.println
LEFT_ROUND_B (
NEW new
ID BinaryClass
LEFT_ROUND_B (
RIGHT_ROUND_B )
DOT .
ID binarySearch
LEFT_ROUND_B (
INTEGRAL_LITERAL 10
RIGHT_ROUND_B )
RIGHT_ROUND_B )
SEMICOLON ;
RIGHT_CURLY_B }
RIGHT_CURLY_B }
CLASS class
ID BinaryNode
EXTENDS extends
ID BinaryClass
LEFT_CURLY_B {
FLOAT float
LEFT_SQUARE_B [
RIGHT_SQUARE_B ]
ID data
SEMICOLON ;
INT int
ID size
SEMICOLON ;
RIGHT_CURLY_B }
CLASS class
ID BinaryClass
LEFT_CURLY_B {
FLOAT float
LEFT_SQUARE_B [
RIGHT_SQUARE_B ]
ID data
SEMICOLON ;
INT int
ID size
SEMICOLON ;
ID BinaryClass
LEFT_ROUND_B (
RIGHT_ROUND_B )
LEFT_CURLY_B {
ID data
ASSIGNMENT =
NEW new
FLOAT float
LEFT_SQUARE_B [
INTEGRAL_LITERAL 5
RIGHT_SQUARE_B ]
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 0
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 1
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 1
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 2
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 2
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 3
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 3
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 4
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 4
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 5
SEMICOLON ;
RIGHT_CURLY_B }
PUBLIC public
BOOLEAN boolean
ID init
LEFT_ROUND_B (
RIGHT_ROUND_B )
LEFT_CURLY_B {
ID data
ASSIGNMENT =
NEW new
FLOAT float
LEFT_SQUARE_B [
INTEGRAL_LITERAL 5
RIGHT_SQUARE_B ]
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 0
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 1
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 1
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 2
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 2
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 3
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 3
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 4
SEMICOLON ;
ID data
LEFT_SQUARE_B [
INTEGRAL_LITERAL 4
RIGHT_SQUARE_B ]
ASSIGNMENT =
INTEGRAL_LITERAL 5
SEMICOLON ;
RETURN return
TRUE true
SEMICOLON ;
RIGHT_CURLY_B }
PUBLIC public
BOOLEAN boolean
ID binarySearch
LEFT_ROUND_B (
INT int
ID key
RIGHT_ROUND_B )
LEFT_CURLY_B {
INT int
ID low
SEMICOLON ;
INT int
ID high
SEMICOLON ;
INT int
ID middle
SEMICOLON ;
BOOLEAN boolean
ID res
SEMICOLON ;
ID low
ASSIGNMENT =
INTEGRAL_LITERAL 0
SEMICOLON ;
ID high
ASSIGNMENT =
ID size
MINUS -
INTEGRAL_LITERAL 1
SEMICOLON ;
WHILE while
LEFT_ROUND_B (
ID high
LESSTHAN <
ID low
RIGHT_ROUND_B )
LEFT_CURLY_B {
ID middle
ASSIGNMENT =
ID low
PLUS +
ID high
SEMICOLON ;
RIGHT_CURLY_B }
ID res
ASSIGNMENT =
FALSE false
SEMICOLON ;
RETURN return
ID res
SEMICOLON ;
RIGHT_CURLY_B }
RIGHT_CURLY_B }